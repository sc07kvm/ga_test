name: main

on:
  push:
    branches:
      - master

jobs:
  lint_code_style:
    runs-on: ubuntu-20.04   
    steps:
      - name: Checkout
        uses: actions/checkout@v2 
      - name: Install clang
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal main'        
          sudo apt-get install clang-format
      - name: Version clang
        run: clang-format --version
      - name: Lint the code
        run: clang-format --Werror --verbose --dry-run --style=LLVM ./src/*
    
  lint_clang:
    # needs: lint_code_style
    runs-on: ubuntu-20.04 
    steps:
      - name: Checkout
        uses: actions/checkout@v2 
      - name: Install clang
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal main'
          sudo apt-get install clang clang-tools
      - name: Version clang
        run: clang --version    
      - name: Lint the code
        run: scan-build --status-bugs -v -o ./analysis_result/ make
      - name: Upload
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: analysis_result_clang
          path: ./analysis_result/*

  test_linux:
    # needs: lint_clang
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install clang
        run: |
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
          sudo add-apt-repository 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal main'  
          sudo apt-get install clang clang-tools
      - name: Version clang
        run: clang --version  
      - name: Build and Test code
        run: make DEBUG=1 regress
      
  build_mac:
    # needs: [lint_code_style, lint_clang, test_linux]
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Build code
        run: make
      - name: Selftest
        run:
          ./bin/ga-test --selftest
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: ga-test_mac
          path: ./bin/ga-test      

  build_linux:
    # needs: [lint_code_style, lint_clang, test_linux]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2  
      - name: Build code
        run: make
      - name: Selftest
        run:
          ./bin/ga-test --selftest
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: ga-test
          path: ./bin/ga-test

  build_windows:
    # needs: [lint_code_style, lint_clang, test_linux]
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: ["Release"]
        platform: ["x64"]
        include:
          - platform: x64
            arch: x64
          # - platform: Win32
          #   arch: x86

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # This not work for nmake
      # - name: Add msbuild to PATH
      #   uses: microsoft/setup-msbuild@v1
      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
      
      - name: Cache Externals
        id: cache-externals
        uses: actions/cache@v2
        with:
          path: .\externals\${{ matrix.platform }}\Release
          key: ${{ runner.os }}-externals-${{ matrix.platform }}-release
        
      - name: Install OpenSSL
        if: steps.cache-externals.outputs.cache-hit != 'true'
        run: | 
          curl -fsSL https://github.com/openssl/openssl/archive/OpenSSL_1_1_1i.zip -o OpenSSL_1_1_1i.zip
          7z x OpenSSL_1_1_1i.zip
          mkdir .\openssl-OpenSSL_1_1_1i\${{ matrix.platform }}\Release
          cd .\openssl-OpenSSL_1_1_1i\${{ matrix.platform }}\Release
          perl ..\..\Configure VC-WIN64A-masm
          nmake
          xcopy ..\..\include\openssl ..\..\..\externals\${{ matrix.platform }}\Release\include\openssl\
          xcopy include\openssl ..\..\..\externals\${{ matrix.platform }}\Release\include\openssl\ /y
          xcopy libssl.lib ..\..\..\externals\${{ matrix.platform }}\Release\shared_lib\
          xcopy libcrypto.lib ..\..\..\externals\${{ matrix.platform }}\Release\shared_lib\
          xcopy libssl-1_1.dll ..\..\..\externals\${{ matrix.platform }}\Release\bin\
          xcopy libcrypto-1_1.dll ..\..\..\externals\${{ matrix.platform }}\Release\bin\
      
      - name: Install PCRE
        if: steps.cache-externals.outputs.cache-hit != 'true'
        run: |
          curl -fsSL https://ftp.pcre.org/pub/pcre/pcre-8.44.zip -o pcre-8.44.zip
          7z x pcre-8.44.zip
          cd pcre-8.44
          cmake . -A ${{ matrix.platform }} -DBUILD_SHARED_LIBS=ON
          msbuild -m PCRE.sln /p:Configuration=Release /p:Platform=${{ matrix.platform }}
          xcopy pcre.h ..\externals\${{ matrix.platform }}\Release\include\
          xcopy Release\pcre.lib ..\externals\${{ matrix.platform }}\Release\shared_lib\
          xcopy Release\pcre.dll ..\externals\${{ matrix.platform }}\Release\bin\

      - name: Build code
        run: msbuild .\vs17\ga_test.sln /property:Configuration=${{ matrix.configuration }} /property:Platform=${{ matrix.platform }} /m
      
      - name: Selftest
        run:
          xcopy .\externals\${{ matrix.platform }}\Release\bin\libssl-1_1.dll .\bin\${{ matrix.platform }}\${{ matrix.configuration }}\
          xcopy .\externals\${{ matrix.platform }}\Release\bin\libcrypto-1_1.dll .\bin\${{ matrix.platform }}\${{ matrix.configuration }}\
          xcopy .\externals\${{ matrix.platform }}\Release\bin\pcre.dll .\bin\${{ matrix.platform }}\${{ matrix.configuration }}\
          .\bin\${{ matrix.platform }}\${{ matrix.configuration }}\ga-test.exe --selftest
      
      - name: Upload
        uses: actions/upload-artifact@v2
        with:
          name: ga-test.exe
          path: .\bin\${{ matrix.platform }}\${{ matrix.configuration }}\ga-test.exe
